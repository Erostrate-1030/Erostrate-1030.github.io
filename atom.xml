<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erostrate&#39;s Library</title>
  
  
  <link href="http://this-lib-cannot-afford-other-names.xyz/atom.xml" rel="self"/>
  
  <link href="http://this-lib-cannot-afford-other-names.xyz/"/>
  <updated>2022-10-23T09:21:59.684Z</updated>
  <id>http://this-lib-cannot-afford-other-names.xyz/</id>
  
  <author>
    <name>Erostrate</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>唉酱 搭建日志</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_building.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_building.html</id>
    <published>2022-10-23T09:18:38.502Z</published>
    <updated>2022-10-23T09:21:59.684Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>👾：突然想到了一个绝妙的bot想法<br>    ：随机产出“唉，…”语句<br>    ：每天唉个2-3条<br>    ：bot名叫人类<br>🐰：唉  我cp做爱太多</p></blockquote><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如上所述，半夜睡觉之前突然想到可以这样做。<del>借这个Bot，我们一起来思考，(非)仿生长毛象机器人会不会像人类一样有诸多烦恼。</del></p><p>这个机器人应该会随着我脑洞的扩大持续更新，所以在创建这篇文章的同时，我创建了相应的更新日志。其他后续功能（<del>以及画饼</del>）会更新在更新日志中。</p><p>本篇文章中，所有资料的参考来源都进行了标注，如果有搭建需要的朋友可自行查阅。</p><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>目前基本搭建需求</div><div class="blockquote-note__content"><ul><li>每天定时产出随机语句（“唉，” + 任意内容）</li><li>根据用户投稿，语料库可更新</li></ul></div></blockquote><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="Setting-up-a-Mastodon-Bot-2"><a href="#Setting-up-a-Mastodon-Bot-2" class="headerlink" title="Setting up a Mastodon Bot 2"></a>Setting up a Mastodon Bot <a href="https://www.youtube.com/watch?v=pY4b18JGCKE&list=PLRqwX-V7Uu6byiVX7_Z1rclitVhMBmNFQ&index=2">2</a></h3><h4 id="bot-js"><a href="#bot-js" class="headerlink" title="bot.js"></a><code>bot.js</code></h4><p>并不是所有的实例都欢迎机器人的注册。这里我选择了 <a href="https://wxw.moe/">呜呜站</a> 这个实例搭建我的机器人。第一步我们需要为机器人注册一个账号，在注册帐号之后，实例管理员需要一定时间审核我们的请求。</p><p>注册之后填写自己的个人资料，在资料页面<strong>必须</strong>勾选 <code>This is a bot accout</code> 选项。</p><p>在账号主页面，找到 <code>Edit profile - Development - New application</code> 。保存设置后，重新点入设置好的 <code>application</code>, 获取账号密钥（不要跟任何人分享 ❗）</p><p>在Bot账号对应的代码文件夹打开 cmd </p><ul><li>输入 <code>npm init</code> ，根据相关指引完成初步设置<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Press C at any time to quit.</span><br><span class="line">package name: (mastodon<span class="literal">-human-bot</span>)</span><br><span class="line">version: (<span class="number">1.0</span>.<span class="number">0</span>)</span><br><span class="line">description: building bot</span><br><span class="line">entry point: (index.js) bot.js</span><br><span class="line">test command:</span><br><span class="line">git repository:</span><br><span class="line">keywords: bot, mastodon</span><br><span class="line">author: Erostrate <span class="comment">#这里是我的名字</span></span><br><span class="line">license: (ISC) MIT</span><br><span class="line">About to <span class="built_in">write</span> to D:\mastodon<span class="literal">-human-bot</span>\package.json: </span><br></pre></td></tr></table></figure></li><li>输入 <code>code</code> ，打开 VS Code 界面，可以发现文件夹里多一个名为 <code>package.json</code> 的文件</li><li>在 <code>package.json</code> 同级目录下，新建 <code>bot.js</code></li></ul><h4 id="First-toot"><a href="#First-toot" class="headerlink" title="First toot"></a>First toot</h4><p>在 <code>bot.js</code> 中，我们首先要做的是连接到 Mastodon 的端口。我们使用的是 <a href="https://github.com/vanita5/mastodon-api">mastodon-api</a>.<br>安装  <a href="https://github.com/vanita5/mastodon-api">mastodon-api</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">--save</span> mastodon<span class="literal">-api</span></span><br></pre></td></tr></table></figure><p><code>bot.js</code> 中的代码参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Mastodon</span> = <span class="built_in">require</span>(<span class="string">&#x27;mastodon-api&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mastodon Bot starting...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mastodon</span> <span class="keyword">from</span> <span class="string">&#x27;mastodon-api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> M = <span class="keyword">new</span> <span class="title class_">Mastodon</span>(&#123;</span><br><span class="line">  <span class="attr">client_key</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">client_secret</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">access_token</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout_ms</span>: <span class="number">60</span> * <span class="number">1000</span>,  <span class="comment">// optional HTTP request timeout to apply to all requests.</span></span><br><span class="line">  <span class="attr">api_url</span>: <span class="string">&#x27;https://botsin.space//api/v1/&#x27;</span>, <span class="comment">// optional, defaults to https://mastodon.social/api/v1/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>There are three core ways to engage with the Mastodon API</p><ul><li><code>get</code></li><li><code>post</code></li><li><code>streaming</code></li></ul></blockquote><p>这里主要会用到 <code>post</code>，因此我们查看它的 <a href="https://github.com/McKael/mastodon-documentation/blob/master/Using-the-API/API.md">说明</a> </p><ul><li>我们可以看到在 <code>post</code> 中，我们的代码格式是 <code>M.post(path, [params], callback)</code> </li><li>在 <code>[params]</code> 处，根据说明，可以有 <code>status</code> 等多项元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mastodon Bot starting...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mastodon</span> <span class="keyword">from</span> <span class="string">&#x27;mastodon-api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> M = <span class="keyword">new</span> <span class="title class_">Mastodon</span>(&#123;</span><br><span class="line">  <span class="attr">client_key</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">client_secret</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">access_token</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout_ms</span>: <span class="number">60</span> * <span class="number">1000</span>,  </span><br><span class="line">  <span class="comment">// optional HTTP request timeout to apply to all requests.</span></span><br><span class="line">  <span class="attr">api_url</span>: <span class="string">&#x27;https://wxw.ooo//api/v1/&#x27;</span>, </span><br><span class="line">  <span class="comment">// optional, defaults to https://mastodon.social/api/v1/</span></span><br><span class="line">  <span class="comment">// 推荐选择免翻墙的实例或者它的镜像</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;唉。&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M.<span class="title function_">post</span>(<span class="string">&quot;statuses&quot;</span>, params, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完成上述代码，在终端运行 <code>node bot.js</code>，便可看到机器人发表了第一条嘟文。</p><h3 id="Environment-Variables-in-Node-with-dotenv-3"><a href="#Environment-Variables-in-Node-with-dotenv-3" class="headerlink" title="Environment Variables in Node with dotenv 3"></a>Environment Variables in Node with dotenv <a href="https://www.youtube.com/watch?v=pY4b18JGCKE&list=PLRqwX-V7Uu6byiVX7_Z1rclitVhMBmNFQ&index=3">3</a></h3><h4 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a><code>dotenv</code></h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv</span><br></pre></td></tr></table></figure><p><code>dotenv</code> 可以帮助我们为一个项目创建环境变量。在这里可以用于隐藏密钥。</p><p>如果运行<code>node bot.js</code> 报错 <code>SyntaxError: Cannot use import statement outside a module</code>，解决方法见<a href="http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_errors.html">修理日记</a>。</p><p>新建 <code>.env</code> 文件，在其中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AUTH_TOKEN = ...</span><br><span class="line">CLIENT_SECRET = ...</span><br><span class="line">CLIENT_KEY = ...</span><br></pre></td></tr></table></figure><h4 id="bot-js-1"><a href="#bot-js-1" class="headerlink" title="bot.js"></a><code>bot.js</code></h4><p>打开 <code>bot.js</code> ，修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Mastodon Bot starting...&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">ENV</span> <span class="keyword">from</span> <span class="string">&quot;dotenv&quot;</span> <span class="comment">//加载dotenv</span></span><br><span class="line"><span class="variable constant_">ENV</span>.<span class="title function_">config</span>()</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mastodon</span> <span class="keyword">from</span> <span class="string">&#x27;mastodon-api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> M = <span class="keyword">new</span> <span class="title class_">Mastodon</span>(&#123;</span><br><span class="line">  <span class="attr">client_key</span>: process.<span class="property">env</span>.<span class="property">CLIENT_KEY</span>, <span class="comment">//使用.env中的信息，隐去上一个代码块中的相关信息</span></span><br><span class="line">  <span class="attr">client_secret</span>: process.<span class="property">env</span>.<span class="property">CLIENT_SECRET</span>,</span><br><span class="line">  <span class="attr">access_token</span>: process.<span class="property">env</span>.<span class="property">AUTH_TOKEN</span>,</span><br><span class="line">  <span class="attr">timeout_ms</span>: <span class="number">60</span> * <span class="number">1000</span>,  <span class="comment">// optional HTTP request timeout to apply to all requests.</span></span><br><span class="line">  <span class="attr">api_url</span>: <span class="string">&#x27;https://botsin.space//api/v1/&#x27;</span>, <span class="comment">// optional, defaults to https://mastodon.social/api/v1/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;唉。&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M.<span class="title function_">post</span>(<span class="string">&quot;statuses&quot;</span>, params, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a><code>.gitignore</code></h4><p>与此同时，新建 <code>.gitignore</code> 文件，在其中键入 <code>.env</code>。这样做的目的是，后续Git 上传代码的时候，不会将密钥暴露。</p><h3 id="Posting-with-setInterval-4"><a href="#Posting-with-setInterval-4" class="headerlink" title="Posting with setInterval() 4"></a>Posting with setInterval() <a href="https://www.youtube.com/watch?v=pY4b18JGCKE&list=PLRqwX-V7Uu6byiVX7_Z1rclitVhMBmNFQ&index=4">4</a></h3><p><code>setInterval()</code> 这个函数，顾名思义，就是让你的 Bot 定时做一些事。</p><h4 id="bot-js-2"><a href="#bot-js-2" class="headerlink" title="bot.js"></a><code>bot.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span></span><br><span class="line"></span><br><span class="line">M.<span class="title function_">post</span>(<span class="string">&quot;statuses&quot;</span>, params, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data, <span class="literal">null</span>, <span class="number">2</span>); <span class="comment">// 加上这一行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行完毕后，同级目录下会多出 <code>data.json</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">M.<span class="title function_">post</span>(<span class="string">&quot;statuses&quot;</span>, params, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ID: &#x27;</span> + data.<span class="property">id</span> + <span class="string">&#x27; and timestamp: &#x27;</span> + data.<span class="property">created_at</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这一步的更改，使得每次成功发表嘟文之后，控制台返回发表嘟文的 <code>id</code> 和 <code>created_at</code> 信息。如果想返回其他信息可查询 <code>data.json</code> 文件中，每条嘟文会有的信息类型。</p><h4 id="status"><a href="#status" class="headerlink" title="status:"></a><code>status:</code></h4><p>更改下面代码的 <code>status</code>，可以改变每次嘟文的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;唉。&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="setInterval-function-interval-in-millisec"><a href="#setInterval-function-interval-in-millisec" class="headerlink" title="setInterval(function, interval_in_millisec)"></a><code>setInterval(function, interval_in_millisec)</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toot_make_love</span>();</span><br><span class="line"><span class="comment">//Defining a function to toot</span></span><br><span class="line"><span class="built_in">setInterval</span>(toot_make_love, <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>); </span><br><span class="line">    <span class="comment">//millisec = sec * 1000</span></span><br><span class="line">    <span class="comment">//It means &quot;do the function every 60 seconds&quot;.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toot_make_love</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> num = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>); </span><br><span class="line">    <span class="comment">//Returning a float between 0 and 1</span></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">    <span class="attr">spoiler_text</span>: <span class="string">&quot;⚠ NSFW&quot;</span>,</span><br><span class="line">    <span class="attr">status</span>: <span class="string">&quot;唉，你cp今天做了 &quot;</span> + num + <span class="string">&quot; 次爱。&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Defining the content of the toot</span></span><br><span class="line"></span><br><span class="line">M.<span class="title function_">post</span>(<span class="string">&quot;statuses&quot;</span>, params, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ID: &#x27;</span> + data.<span class="property">id</span> + <span class="string">&#x27; and timestamp: &#x27;</span> + data.<span class="property">created_at</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote class="blockquote-note blockquote-note__info"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></div>后续步骤</div><div class="blockquote-note__content"><p>后续步骤还有：</p><ul><li>Streaming API [5]<ul><li><code>streaming</code> 可以帮助我们实时获取用户活动（类似于 <code>notification</code>）</li><li>但是这一步我一开始就报错了，不会修。目前基本需求也暂时不用到这几个步骤，所以我跳过了。</li></ul></li><li>Managing User Events [6]</li><li>Replying to a Mention [7]</li></ul></div></blockquote><h3 id="Tree-Bot-8"><a href="#Tree-Bot-8" class="headerlink" title="Tree Bot 8"></a>Tree Bot <a href="https://www.youtube.com/watch?v=pY4b18JGCKE&list=PLRqwX-V7Uu6byiVX7_Z1rclitVhMBmNFQ&index=11">8</a></h3><p>如果我们需要一个功能为定时产生、发送随机语句的bot，我们需要做的事情有：</p><ul><li>设置好运行相应功能的代码</li><li>在 <code>bot.js</code> 中进行定时、上传、发嘟</li></ul><p>到这一步，你可能会不断地遇到 <code>443</code> 错误，这里我提供了我的<a href="http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_errors.html">修理日记</a>。如果你遇到了，不要气馁，坚持做下去总会有结果的！</p><h4 id="定时发送"><a href="#定时发送" class="headerlink" title="定时发送"></a>定时发送</h4><p>这个功能在 <code>bot.js</code> 中的实现遵循以下思路：</p><ul><li>连接账号</li><li>执行功能<ul><li>获取相应功能的 .py</li><li>通过 <code>setInterval()</code>  设置时间间隔</li><li>上传 .py 的输出结果</li><li>发送嘟嘟</li></ul></li></ul><p>我们借助 <code>child_process</code> 模块中的 <code>exec</code> 来连接执行功能的 .py 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; exec &#125; <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> exec_promisify = util.<span class="title function_">promisify</span>(exec);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">function</span> = <span class="string">&#x27;python ./function.py&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这一步，我们的需求是“通过 <code>bot.js</code> 在终端获取 <code>function.py</code> 的输出结果”，因此我们接着： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> response = <span class="title function_">exec_promisify</span>(<span class="keyword">function</span>);</span><br><span class="line"><span class="comment">// 在终端执行 `function`</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">stdout</span>);</span><br><span class="line">    <span class="comment">// 在终端呈现输出结果</span></span><br></pre></td></tr></table></figure><p>输出结果如果是中文语句，可能会出现乱码情况，解决方法见<a href="http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_errors.html">修理日记</a>。</p><p>到这里，我们基本上已经完成了机器人需要的部分，剩下要做的就是把内容整理在一起。我们可以把需要执行的功能视为一个函数（function），<strong>机器人做的就是不断地，在一定条件下，运行这个函数，同时把函数结果输出在时间轴上</strong>。因此，我们首先要做的是把功能封装到一个函数下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">toot_sigh</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">exec_promisify</span>(sigh);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">stdout</span>);</span><br><span class="line">    <span class="comment">// Step 1: Exec processing (create a output string)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">        <span class="attr">status</span>: response.<span class="property">stdout</span>,</span><br><span class="line">        <span class="attr">visibility</span>: <span class="string">&#x27;unlisted&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// Step 2: Upload (return and attach to the following toot)</span></span><br><span class="line">    <span class="comment">// 由于这里我只需要字符串，因此相比上传图片会更加简单。需要上传图片可参照视频代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> final_response = <span class="keyword">await</span> M.<span class="title function_">post</span>(<span class="string">&#x27;statuses&#x27;</span>, params); </span><br><span class="line">    <span class="comment">// Step 3: Toot!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">success</span>: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还记得我们之前的 <code>setInterval()</code> 吗？嗯，套上去。我们在上一个代码串的前面加上以下代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sigh = <span class="string">&#x27;python ./sigh.py&#x27;</span>;</span><br><span class="line"><span class="comment">// 获取相应功能的 .py</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">toot_sigh</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line"><span class="comment">// 定时开始之前先运行一次</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">toot_sigh</span>()</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response))</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//10 * 1000</span></span><br><span class="line">    <span class="number">3</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">    <span class="comment">// millisec = sec * 1000</span></span><br><span class="line">); </span><br><span class="line"><span class="comment">// 设置定时</span></span><br></pre></td></tr></table></figure><p>这时，保存，运行 <code>node bot.js</code> ，理论上我们的机器人就开始嘟嘟嘟嘟嘟了。如果又遇到了 <code>443</code> 错误，请参照<a href="http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_errors.html">修理日记</a>解决。</p><p>最后，如果机器人后续还会有别的功能，每个功能的代码也是类似的编写模式。具体案例可以参照 <a href="https://github.com/TheTarr/mastodon_bot">操操</a> 的 <code>bot.js</code>.</p><h4 id="即时应答"><a href="#即时应答" class="headerlink" title="即时应答"></a>即时应答</h4><ul><li>待续</li></ul><h4 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h4><ul><li>待续</li></ul><hr><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ul><li>缓慢更新</li></ul><hr><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;👾：突然想到了一个绝妙的bot想法&lt;br&gt;    ：随机产出“唉，…”语句&lt;br&gt;    ：每天唉个2-3条&lt;br&gt;    ：bot名叫人类&lt;br&gt;🐰：唉  我cp做爱太多&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="📜 LearningNotes | 学习日常" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    <category term="🐘 Mastodon" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/%F0%9F%90%98-Mastodon/"/>
    
    
    <category term="造物" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E9%80%A0%E7%89%A9/"/>
    
    <category term="Mastodon" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/Mastodon/"/>
    
    <category term="Bot" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/Bot/"/>
    
    <category term="腦洞" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E8%85%A6%E6%B4%9E/"/>
    
    <category term="唉酱" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E5%94%89%E9%85%B1/"/>
    
  </entry>
  
  <entry>
    <title>唉酱 修理笔记</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_errors.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/ai_bot_errors.html</id>
    <published>2022-10-23T09:10:07.126Z</published>
    <updated>2022-10-23T09:14:46.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>慢慢修吧，真烦。</p><span id="more"></span><h2 id="node-js-中文乱码"><a href="#node-js-中文乱码" class="headerlink" title="node.js 中文乱码"></a>node.js 中文乱码</h2><p><code>.py</code> 代码加上一行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="安装模块报错"><a href="#安装模块报错" class="headerlink" title="安装模块报错"></a>安装模块报错</h2><p><code>SyntaxError: Cannot use import statement outside a module </code></p><p><code>package.json</code> 生成后，在代码里面加一行。否则后续 <code>bot.js</code> 会报错 <code>SyntaxError: Cannot use import statement outside a module </code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><hr><h2 id="端口连接报错"><a href="#端口连接报错" class="headerlink" title="端口连接报错"></a>端口连接报错</h2><p><code>Error: Client network socket disconnected before secure TLS connection was established</code></p><h3 id="原因：域名被墙"><a href="#原因：域名被墙" class="headerlink" title="原因：域名被墙"></a>原因：域名被墙</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node:events:<span class="number">491</span></span><br><span class="line">      <span class="keyword">throw</span> er; // Unhandled <span class="string">&#x27;error&#x27;</span> event</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: connect ETIMEDOUT <span class="number">118.107</span>.<span class="number">180.216</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure><p>在这一情况，我推荐的解决方法是：</p><ul><li>换个不会被 404 且 允许搭建机器人的实例</li><li><code>api-url</code> 改为实例相应的镜像域名</li><li><del>肉身移民</del></li></ul><h3 id="原因：无法解释"><a href="#原因：无法解释" class="headerlink" title="原因：无法解释"></a>原因：无法解释</h3><p>这一情况出现于每一次，我重新打开 VS Code 之后。我不知道如何解释、解决这个问题，属于是已经绝望的情况了。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 报错显示如下：</span></span><br><span class="line">node:events:<span class="number">491</span></span><br><span class="line">      <span class="keyword">throw</span> er; // Unhandled <span class="string">&#x27;error&#x27;</span> event</span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line">Error: Client network socket disconnected before secure TLS connection was established</span><br></pre></td></tr></table></figure><p>发生在重新打开文件运行 <code>node bot.js</code> 时，首先排查 <strong>端口占用</strong> 情况。这一情况一般发生在80端口。</p><p>打开 <code>cmd</code> ，输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat <span class="literal">-ano</span>|findstr <span class="string">&quot;80&quot;</span> </span><br><span class="line"><span class="comment"># 假设对应PID为5136</span></span><br><span class="line">taskkill <span class="literal">-PID</span> <span class="number">5136</span> <span class="operator">-F</span></span><br><span class="line"><span class="comment"># 关闭，如果关不掉，打开任务管理器关闭</span></span><br></pre></td></tr></table></figure><p>占用你端口的可能是微信、坚果云等等，或者其它你并不认识的进程，都关了。如果关了一个端口之后没有变化，就继续关其他跟“80”相关的端口，直到代码能正常运行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;慢慢修吧，真烦。&lt;/p&gt;</summary>
    
    
    
    <category term="📜 LearningNotes | 学习日常" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    <category term="🐘 Mastodon" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/%F0%9F%90%98-Mastodon/"/>
    
    
    <category term="Mastodon" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/Mastodon/"/>
    
    <category term="Bot" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/Bot/"/>
    
    <category term="腦洞" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E8%85%A6%E6%B4%9E/"/>
    
    <category term="唉酱" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E5%94%89%E9%85%B1/"/>
    
  </entry>
  
  <entry>
    <title>在太平洋衝浪要做好防溺水措施</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/dos_and_donts_when_surfing.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/dos_and_donts_when_surfing.html</id>
    <published>2022-10-22T04:59:25.327Z</published>
    <updated>2022-10-22T08:02:13.108Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9b5a8cee2ce3b641028240a869c55eaa086e2943738e9def24ccf5522ff8476"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">···</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">···</summary>
    
    
    
    <category term="📜 LearningNotes | 学习日常" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    <category term="🍻 安利" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/%F0%9F%8D%BB-%E5%AE%89%E5%88%A9/"/>
    
    
  </entry>
  
  <entry>
    <title>一些摘录</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/initium_221022.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/initium_221022.html</id>
    <published>2022-10-22T02:38:02.942Z</published>
    <updated>2022-10-22T02:50:27.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><blockquote><p>最早提出迷因一词的，是英国演化生物学家、动物行为学家理查・道金斯（Clinton Richard Dawkins）。他在《自私的基因》一书中指，迷因是文化中被认为经由非遗传方式、尤其是透过模仿来传递下去的元素。《牛津英语词典》也收录了迷因一词，并使用了上述定义。道金斯进一步说明，迷因可以透过模仿、复制，将想法、观念、行为或技能从一个人的大脑移转到另一个人的脑中。</p><p>英国心理学者苏珊・布拉克莫（Susan Blackmore）延续道金斯的观点，在《迷因》一书中指，网际网络让迷因快速发展，尤其以“高保真度”、“持久度”让迷因不断复制、传递。迷因也从产品复制到指令复制。苏珊・布拉克莫举例，厨师能复制一款浓汤，但为了让浓汤更有效地传递出去，就要复制食谱，有清楚的指令，便能够让这款浓汤的味道散布出去。她认为，一段字词、一个故事、一套规矩、一首歌曲都可以是迷因，最经典的案例大概就是全世界都理解的“生日快乐歌”。</p><p>[…] 政治大学传播学院特聘教授林日璇撰文《台湾网路社群的迷因文化特色是？元宇宙概念中那些迷因最红？》，提到传播学理论中的“社会资讯处理程序理论”（Social Information Processing Theory, Walther），网民以匿名、半匿名方式互动，文字容易造成误解，进而引发笔战，若是增加表情符号，则能加强传递想法。而迷因、梗图的出现，更能补充文字的不足。甚至发展出社群中独特的梗，作为团体内认同的文化。<a href="https://theinitium.com/article/20220714-taiwan-meme-1/">1</a></p></blockquote><blockquote><p>地狱梗指将笑点建立在特定事件或族群上，并带有浓厚的嘲讽、冒犯、挑战道德底线的意味。一般来说，地狱梗就是让观者感受到违和、不协调而产生幽默感。不过，地狱梗的接受度也随着心理距离而有所不同。心理学家 Peter McGraw 与 Caleb Warren提出“良性冲突论”，笑话要落在有点痛苦却又安全愉悦的良性冲突区间，才会让观者愉悦，笑话与观者的心理距离太接近则会成为威胁、降低幽默的感受，太远又会因为冲突降低而无法理解笑点。</p><p>打着开玩笑大旗的地狱梗界线到底该如何界定，幽默、不道德的界线又到底怎么区分？在台湾大学外文系教授黄宗慧、东华大学华文系教授黄宗洁姊妹合著的书籍《就算牠没有脸》中指出，佛洛伊德曾说：“每个笑话都会募集自己的群众，而为同一个笑话而笑是心理一致性的明显证据”。黄宗慧强调，就如同其他的地狱梗玩笑，看似无关紧要的玩笑话，随着笑话的传播，歧视的态度一再被合理化。开玩笑的人主张豁免权，不应受道德批判，被嘲讽的对象若介意了则显得“不幽默”，造成二度伤害，严肃议题若成了玩笑，也许就很难再回到主题本身。</p><p>黄宗洁则更进一步指出，同时保有幽默感与道德敏感度并不冲突，一位谴责玩笑未必能让彼此理解，如果人愿意时刻提醒自己保有敏感度，“每个人都可以画出谑而不虐的那条线”。<a href="https://theinitium.com/article/20220714-taiwan-meme-1/">1</a></p></blockquote><hr><blockquote><p>当然，阅读量得到满足后，“阅读收获”的理解也是因人而异、因时代而异的。如果说上世纪80年代，书店每一个排队的人都曾强烈希望改变命运。那么21世纪迈进信息社会， 以价格换算阅读量的斤斤计较背后，将阅读体验理解为“不可计量的收获”的背后，是罗振宇、吴晓波、樊登等中国商人用泛知识类App（如得到、分答、樊登读书），打造的“知识经济”盛宴，推崇智识崇拜，寄托了关于新奇知识、自我探索、世界认识，财富最美好的梦想。<a href="https://theinitium.com/article/20220606-mainland-kindle/">2</a></p></blockquote><hr><blockquote><p>没想到的是，自由度的收紧比我以为的快太多太多，短短一年时间，我已经不得不学会内在地消化那些愤怒，或是用极委婉的方式才敢尝试着做一些表达。在不能言说的时候，我自救的方式是尽可能与更多同温层产生联结，而mla让我看到联结的起点在何处——当言说空间日渐萎缩，我们可以在生活的细枝末节中收获力量。在春天乱搭巴士，在动物园散步，或是在麦记独坐一夜，我们可以在小世界给自己有限的自由，在低空的飞行中学会关心自己和自己身边最平凡的人，借共情的能力打开自己的边界，用敏锐的私人体验反驳宏大话语强加的标签，以及心里一遍又一遍告诉自己：“在炎热与抑郁的夏天，不要停止写诗”。<a href="https://theinitium.com/article/20211016-note-readers-voices-7-mla/">3</a></p></blockquote><hr><blockquote><p>MLA 那幽默感Hongkongness，从名字就开始。非香港学校成长难以一click 即中（学生时代开玩笑说平胸的女生是“飞机场”，但这个in joke似从没被公开认可为组合名称的由来，只能各自领会）。甚至乎，MLA作品中很大部份呈现的，就是这种in joke，懂的会懂，不懂的，要解释就多隔了一重。这种语带相关，要求一份对香港通俗文化的基本理解，贯穿了整套作品。<a href="https://theinitium.com/article/20211002-culture-my-little-airport-these-years/">4</a></p></blockquote><blockquote><p>没有声嘶力竭，现场演出，只静静站在台上，娓娓唱出，不会跟随大队哥哥姐姐去综艺节目飊高音，这就足够贯彻另类我行我素，保留了一定程度的独立精神。</p><p>扩音器传来，叫人随歌起舞的噪音天天在响，这个时代的香港，得保持自己有亲的语言，以及冷眼的幽默感。当主流将逐渐被主旋律取缔，另类乐风与游击演出的意义将更重要。从演出到作品，歌词唱著的无聊和磊落站于台上不摆动的姿态，就是这城市赖以传承及唱不完的故事。<a href="https://theinitium.com/article/20211002-culture-my-little-airport-these-years/">4</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="📰 Excerpts | 它山之石" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%B0-Excerpts-%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    <category term="👁‍🗨 TheInitium" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%B0-Excerpts-%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/%F0%9F%91%81%E2%80%8D%F0%9F%97%A8-TheInitium/"/>
    
    
    <category term="端媒" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E7%AB%AF%E5%AA%92/"/>
    
    <category term="MLA" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/MLA/"/>
    
  </entry>
  
  <entry>
    <title>📌 今天應該很高興</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/today_should_be_a_happy_day.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/today_should_be_a_happy_day.html</id>
    <published>2022-10-19T12:26:12.753Z</published>
    <updated>2022-10-19T12:45:08.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/3vfT8rhjijlnDAge02wIs4?utm_source=generator" width="100%" height="152" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><p>希望大家终有一天能唱自己想唱的歌，跳自己想跳的舞。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/track/3vfT8rhjijlnDAge02wIs4?utm_source=generator&quot; width=&quot;100%&quot; height=&quot;152&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;希望大家终有一天能唱自己想唱的歌，跳自己想跳的舞。&lt;/p&gt;</summary>
    
    
    
    <category term="🍵 AboutMe | 生活碎片" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%8D%B5-AboutMe-%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87/"/>
    
    
    <category term="達明" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E9%81%94%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>《那些桥》</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/on_the_bridge.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/on_the_bridge.html</id>
    <published>2022-10-19T12:25:39.481Z</published>
    <updated>2022-10-22T02:44:54.173Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>黑色星球之上，今夜星光依旧灿烂。</p><span id="more"></span><blockquote><p>所有的桥都孤独，<br>而声望对它们而言是危险<br>对我们也如此，我们却误以为<br>在我们的肩头感受到了<br>恒星的脚步。<br>可是在消逝者的落差之上<br>还没有梦为我们搭起拱顶 [1]</p></blockquote><blockquote><p>Ours is essentially a tragic age, so we refuse to take it tragically. The cataclysm has happened, we are among the ruins, we start to build up new little habitats, to have new little hopes. It is rather hard work: there is now no smooth road into the future: but we go round, or scramble over the obstacles. We’ve got to live, no matter how many skies have fallen. [2]</p></blockquote><p>[1]: 出自 英格博格•巴赫曼《那些桥》<br>[2]: 出自 D·H·劳伦斯《查泰莱夫人的情人》</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;黑色星球之上，今夜星光依旧灿烂。&lt;/p&gt;</summary>
    
    
    
    <category term="📰 Excerpts | 它山之石" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%B0-Excerpts-%E5%AE%83%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
    <category term="希望" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E5%B8%8C%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>DS8 結課紀念</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/end_of_DS8.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/end_of_DS8.html</id>
    <published>2022-10-16T14:24:50.961Z</published>
    <updated>2022-10-19T12:39:21.415Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>220714-221016 | 在大洋彼岸的校园中呼吸平常的自由</p><blockquote><p>And for the very first time in 30 years of teaching,<br>l have taken an introductory class<br>with no math or computing prerequisite<br>and taught them how to do nonlinear regression.<br>There is no other class that does this.<br>You have enormous power.</p></blockquote><span id="more"></span><p>之所以决定写一篇博文记录结课，一是因为这三个月我从中学到了很多（从Python零基础成长到可以用Python写简单的分类器），二是因为这系列课程给我留下了不少被触动的瞬间。</p><p>说来惭愧，<a href="http://data8.org/">DS8</a> 的课堂是这四年来为数不多满足了我对大学幻想的课程之一，而我对大学的幻想，不过是自由散漫的学习氛围。从这点看来，倒也不是我该惭愧，反而应该是此地诸多高等学府的羞耻了。</p><p>DS8 的三十九次课，给我最大触动的是老师的真诚与鼓励。那位授课老师反复地鼓励我们提出疑问，反复提醒着当时在场的学生：大部分人都有着与你一样的疑惑，如果你是少数人，那么助教会帮助你解决你的疑惑。</p><p>在之前的教育中，我习得了对问题的羞耻与窘迫，而当我通过互联网来到了17年的大洋彼岸，我才听到了一句对在场的人如同呼吸般正常的劝慰。也正是在那刻，我更加相信：故弄玄虚并不能使知识抬价，知识本就是平常而真诚的。</p><p>除此之外，当在场的人如呼吸般讨论选举公平性等社会议题的时候，我，作为一个时刻被迫谨言慎行的人，不免被平常的语言表达与交流触动。三个月以来，我不时会点下暂停，对着17年秋季的课程录像陷入沉思：在大洋彼岸，原来有人呼吸着与我身边不一样的空气，那里存在平常的真实的自由。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;220714-221016 | 在大洋彼岸的校园中呼吸平常的自由&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And for the very first time in 30 years of teaching,&lt;br&gt;l have taken an introductory class&lt;br&gt;with no math or computing prerequisite&lt;br&gt;and taught them how to do nonlinear regression.&lt;br&gt;There is no other class that does this.&lt;br&gt;You have enormous power.&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="📜 LearningNotes | 学习日常" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/"/>
    
    <category term="💻 DS Learning" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%93%9C-LearningNotes-%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%B8%B8/%F0%9F%92%BB-DS-Learning/"/>
    
    
    <category term="DS8" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/DS8/"/>
    
  </entry>
  
  <entry>
    <title>那個下午我在舊居燒信</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/burning_letters.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/burning_letters.html</id>
    <published>2022-10-15T13:25:56.225Z</published>
    <updated>2022-10-19T12:33:06.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><iframe style="border-radius:12px" src="https://open.spotify.com/embed/track/0PYOuxa9oUTm8LlkagkxYE?utm_source=generator" width="100%" height="152" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><blockquote><p>茫茫如水一般日子淌過<br>如風的呼吸記憶於我</p></blockquote><span id="more"></span><p>那个下午我在旧居烧信，细数着自己十九岁之后的四年人生。我常常在想，在这段时间里，我是否有鲜活、自由地活过。</p><p>在20年之前，也就是疫情前时代，我享受过半年无忧无虑的大学生活。那段安逸的时光里，我除了上课什么都不用想。在此之后，我的生命飞速地在居家、内卷、封校等枯燥乏味的事情中度过。</p><p>转眼间，我快要毕业了。我如愿以偿地被理想的学校录取，可是我发现我的四年实在无聊。</p><p>我不能说在这四年里，我没有好好地享受过。我只觉得，自己一直像一只来到陌生环境中受惊吓的动物，我的应激体现在我沉迷于图书馆-饭堂-宿舍的三点一线之中，除此之外，我独来独往，也鲜少将时间大量地花费在学习（无论是专业学习还是自己在此之外的学习）上。我放弃了自己大多数的兴趣。</p><p>于是，我虽然在无意义的竞争中倔强地保持了自己的本性，但是我某种程度上成为了一个无个性无兴趣的人。我喜欢画画，但是自大学之后，我鲜少提起画笔；我喜欢看小说，但是似乎大二以来，我也没看多少。</p><p>我生命的火焰本应在此时熊熊燃烧，然而，我并不觉得自己是个非常有生命力的人，也不觉得自己此时此刻是一个被理想驱动的人。我不断逃避，但是鲜少奔赴，仿佛我的前方已经失去可以为之奔赴的目标。我羡慕着朋友自由生长的模样，而我的生长并不自由，它不过是时间流逝的必然结果。</p><p>不去逃避，去面对，去经历。这便是接下来我能做的事情。</p>]]></content>
    
    
    <summary type="html">&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/track/0PYOuxa9oUTm8LlkagkxYE?utm_source=generator&quot; width=&quot;100%&quot; height=&quot;152&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;/iframe&gt;


&lt;blockquote&gt;
&lt;p&gt;茫茫如水一般日子淌過&lt;br&gt;如風的呼吸記憶於我&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="🍵 AboutMe | 生活碎片" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%8D%B5-AboutMe-%E7%94%9F%E6%B4%BB%E7%A2%8E%E7%89%87/"/>
    
    
    <category term="達明" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E9%81%94%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>📌 Change Log 更新日志</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/change_log.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/change_log.html</id>
    <published>2022-10-15T12:16:01.550Z</published>
    <updated>2022-10-22T05:07:51.013Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里是关于这个博客的更新日志，长期更新（大概）</p><span id="more"></span><h2 id="🤔-想上线的功能"><a href="#🤔-想上线的功能" class="headerlink" title="🤔 想上线的功能"></a>🤔 想上线的功能</h2><table><thead><tr><th>加入日期</th><th>任务</th><th>紧急</th><th>必要</th><th>目前状态</th></tr></thead><tbody><tr><td>22-10-22</td><td>文章漫游</td><td>❌</td><td>❌</td><td>要修改权限</td></tr><tr><td>-</td><td>顶栏导航</td><td>❌</td><td>⭕</td><td>-</td></tr></tbody></table><hr><h2 id="🤗-以下是更新日志"><a href="#🤗-以下是更新日志" class="headerlink" title="🤗 以下是更新日志"></a>🤗 以下是更新日志</h2><h3 id="2022-10-22"><a href="#2022-10-22" class="headerlink" title="2022-10-22"></a>2022-10-22</h3><ul><li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt">隐私设置 hexo-blog-encrypt</a><ul><li>之前装了之后发现很丑，需要改CSS，卸了</li><li>又装了回来，因为发现有些主题还挺好看的，将就用吧</li></ul></li></ul><h3 id="2022-10-21"><a href="#2022-10-21" class="headerlink" title="2022-10-21"></a>2022-10-21</h3><ul><li><a href="https://github.com/hexojs/hexo-generator-feed">rss订阅 hexo-generator-feed</a><ul><li>订阅只需要在主页域名后加 <code>/atom.xml</code> 即可</li></ul></li></ul><h3 id="2022-10-17"><a href="#2022-10-17" class="headerlink" title="2022-10-17"></a>2022-10-17</h3><ul><li><a href="https://github.com/Drew233/hexo-generator-random">文章漫游 hexo-generator-random</a><ul><li>会随机到一些不想被别人看到的页面，安全性担忧</li><li>后续可能会采用不用插件的方案</li></ul></li><li><a href="https://github.com/rozbo/hexo-abbrlink">短链接 hexo-abbrlink</a></li><li><a href="https://developer.spotify.com/documentation/embeds/guides/creating-an-embed/">文内音乐播放 embed track</a></li></ul><h3 id="2022-10-16"><a href="#2022-10-16" class="headerlink" title="2022-10-16"></a>2022-10-16</h3><ul><li><a href="https://theme-cards.ichr.me/pages/">归档功能 archives</a></li><li>更新了一下CSS代码（子分类缩进）</li></ul><h3 id="2022-10-15"><a href="#2022-10-15" class="headerlink" title="2022-10-15"></a>2022-10-15</h3><ul><li>创建更新日志</li></ul><h3 id="2022-10-07"><a href="#2022-10-07" class="headerlink" title="2022-10-07"></a>2022-10-07</h3><ul><li><a href="http://this-lib-cannot-afford-other-names.xyz/posts/genesis.html">创建博客</a><ul><li>初步配置有<ul><li>站内搜索</li><li>匿名评论</li><li>躲避站外搜索</li><li>置顶文章</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里是关于这个博客的更新日志，长期更新（大概）&lt;/p&gt;</summary>
    
    
    
    <category term="🍩 AboutLib | 博客纪年" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%8D%A9-AboutLib-%E5%8D%9A%E5%AE%A2%E7%BA%AA%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Genesis 创世纪</title>
    <link href="http://this-lib-cannot-afford-other-names.xyz/posts/genesis.html"/>
    <id>http://this-lib-cannot-afford-other-names.xyz/posts/genesis.html</id>
    <published>2022-10-07T15:32:10.810Z</published>
    <updated>2022-10-19T12:37:00.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这里是关于我搭建个人博客的故事。</p><span id="more"></span><blockquote class="blockquote-note blockquote-note__important"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></div>写在最前面</div><div class="blockquote-note__content"><p>因为真的很想要一个个人博客(其实还没有想好发什么)，所以决定自己摸索一下从零搭建.</p><p>在最开始，我选择了借助jekyll进行搭建，但是因为我太笨了，折腾了一个晚上也没有结果，于是我跟另一位有自建博客经验的朋友讨论了一下，决定自己从零搭建.在这里，我想把搭建的整个过程记录下来，作为我博客的第一篇文章.</p><p>希望这篇文章可以帮到与我一样，<strong>没有任何代码基础，但是想自建博客</strong>的你.🥺 </p><p>最后，感谢我的朋友🐇兔肉🐇，在这个过程中为我提供的所有支持.🥰</p></div></blockquote><hr><h2 id="🤔-搭建需求"><a href="#🤔-搭建需求" class="headerlink" title="🤔 搭建需求"></a>🤔 搭建需求</h2><ul><li><input checked="" disabled="" type="checkbox"> 与 Obsidian 同步更新，最好二者的文件管理框架相通(毕竟我确实没太聪明)</li><li><input checked="" disabled="" type="checkbox"> 不能被任何搜索引擎搜索到，也不能被网络爬虫爬到</li><li><input checked="" disabled="" type="checkbox"> 能自定义主题，可以根据我的需要改UI</li><li><input checked="" disabled="" type="checkbox"> 可能可以有一个评论区(也不一定)</li></ul><hr><h2 id="😫-具体步骤"><a href="#😫-具体步骤" class="headerlink" title="😫 具体步骤"></a>😫 具体步骤</h2><h3 id="注册GH账号与下载Git"><a href="#注册GH账号与下载Git" class="headerlink" title="注册GH账号与下载Git"></a>注册GH账号与下载Git</h3><ul><li>不说了，很简单，我都能学会.</li></ul><hr><h3 id="绑定GH并提交文件"><a href="#绑定GH并提交文件" class="headerlink" title="绑定GH并提交文件"></a>绑定GH并提交文件</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/102592286">主要参考来源，谢谢这位博主</a></li><li>对clone到本地的仓库的相应文件右击-<code>Git Bash here</code><ul><li><code>git status</code>: 查看仓库状态，显示那些文件未被提交</li><li><code>git add + 文件名</code>: 添加文件到临时缓冲区</li><li><code>git commit -m &quot;commit text file&quot;</code>: 提交文件到仓库<ul><li>第一次提交，即本地没有git仓库的情况下，见下代码</li><li>第二次提交，即本地已有git仓库的情况下，<a href="https://zhuanlan.zhihu.com/p/103391101">见此处</a></li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># 查看仓库状态，显示哪些文件未提交</span><br><span class="line"></span><br><span class="line">$ git add test.txt</span><br><span class="line"># 添加文件到临时缓冲区，等待提交</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;commit text file&quot;</span><br><span class="line"># 提交文件到本地仓库</span><br><span class="line"></span><br><span class="line">$ git log</span><br><span class="line"># 查看本地仓库提交记录</span><br><span class="line"></span><br><span class="line">$ git push origin main</span><br><span class="line"># 更新本地仓库到GH仓库，刷新GH仓库即可看到提交结果</span><br><span class="line"># origin: 远程主机名</span><br><span class="line"># main：仓库所属branch</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在初次提交的状态下，会需要用户定义自己的身份</span><br><span class="line">$ git config --global user.name &quot;name&quot;</span><br><span class="line">$ git config --global user.email &quot;@.com&quot;</span><br><span class="line"></span><br><span class="line"># 然后继续上传即可</span><br></pre></td></tr></table></figure><hr><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/102592286">主要参考来源，谢谢这位博主</a></li><li>这步比较简单，就是找一个适合自己的域名，同时给钱.</li><li>因为我比较吝啬，所以我在 <a href="https://name.com/">https://name.com</a> 上选择了 <code>.xyz</code> 这个后缀，它很便宜<ul><li>令人发指的是， <code>.poor</code> 真的好贵</li></ul></li><li>我最后选择了 <a href="https://this-lib-cannot-afford-other-names.xyz/">https://this-lib-cannot-afford-other-names.xyz</a> 作为我站域名<ul><li>令人发指的是，它也挺贵的</li></ul></li><li>然后朋友告诉我，可能可以找别人代劳，下次我一定记得 😭</li></ul><hr><h3 id="安装-node-js-和-Hexo"><a href="#安装-node-js-和-Hexo" class="headerlink" title="安装 node.js 和 Hexo"></a>安装 node.js 和 Hexo</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/102592286">主要参考来源，谢谢这位博主</a></li></ul><h4 id="关于-node-js"><a href="#关于-node-js" class="headerlink" title="关于 node.js"></a>关于 node.js</h4><ul><li><strong>设置npm在安装全局模块时的路径和环境变量</strong><ul><li>安装之后，在对应文件夹新建两个文件夹 <code>node_cache</code>， <code>node_global</code></li><li>打开cmd，输入<ul><li><code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></li><li><code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></li><li>注意，两个地方都需要右键设置“属性”，将用户具有完全属性的权限</li></ul></li><li>打开 控制面板 -&gt; 系统 -&gt;高级系统设置 -&gt; 环境变量 <ul><li>-&gt; 系统变量，新建一个变量名为“NODE_PATH”，值为“D:\nodejs\node_global\node_modules”</li><li>-&gt; 用户变量，编辑变量“PATH”，将相应npm的路径改为：D:\nodejs\node_global</li></ul></li></ul></li><li><strong>测试</strong><ul><li>在 cmd 命令下执行 <code>npm install webpack -g</code></li><li>然后 webpack 这个模块已经在我们设置默认的文件夹中了</li></ul></li></ul><h4 id="关于-Hexo"><a href="#关于-Hexo" class="headerlink" title="关于 Hexo"></a>关于 Hexo</h4><ul><li>Hexo是我们的个人博客网站的框架，在安装之前，我们要先在GitHub上创立一个仓库<ul><li>这个仓库一定要是公开的</li></ul></li><li>在D盘新建文件夹 blog ,右键 <code>Git Bash here</code><ul><li><code>npm install -g hexo-cli</code> 安装 Hexo</li><li><code>hexo init</code> 初始化博客<ul><li>从这一步开始，需要翻墙</li><li>处理 <code>Error: EPERM: operation not permitted, mkdir ‘D: </code><ul><li><a href="https://www.cnblogs.com/yaohe/p/11912547.html">见此处</a></li><li>大致意思：因为最初我修改路径到其他地方，因此需要把原来默认路径上的文件删掉</li></ul></li></ul></li><li><code>hexo g</code> 静态部署</li><li><code>hexo s</code> 查看状态<ul><li>成功后的样子<ul><li>![[Pasted image 20220906164050.png]]</li></ul></li><li>打开了本地运行的hexo，它开始运行了</li></ul></li></ul></li></ul><h4 id="将Hexo部署到GitHub"><a href="#将Hexo部署到GitHub" class="headerlink" title="将Hexo部署到GitHub"></a>将Hexo部署到GitHub</h4><ul><li>返回 blog 文件夹，笔记本打开 <code>_config.yml</code> 文件</li><li>文件底部填入</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:Erostrate-1030/Erostrate-1030.github.io.git</span></span><br><span class="line">  <span class="comment">#你的仓库地址，SSH 格式</span></span><br><span class="line">  <span class="comment">#一定要检查两个是否一样！</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ul><li>返回 blog 文件，打开 Git Bash，安装Git部署插件，输入<ul><li><code>npm install hexo-deployer-git --save</code></li></ul></li><li>再分别输入（<em><strong>这三条命令也是每次更新GH仓库要输入的命令</strong></em>）<ul><li><code>hexo clean</code> 清除缓存文件 db.json 和已生成的静态文件 public</li><li><code>hexo g</code> 生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</li><li><code>hexo d</code> 自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</li></ul></li><li>完成之后，打开 <a href="https://erostrate-1030.github.io/">https://erostrate-1030.github.io</a> 就可以看到个人主页</li></ul><hr><h3 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/102592286">主要参考来源，谢谢这位博主</a></li><li>打开 cmd 控制台，输入<ul><li><code>ping erostrate-1030.github.io</code> 获取IPV4地址</li></ul></li><li>打开 Blog 文件夹里的 source 文件夹，添加CNAME文件，可以先创建一个CNAME.txt文件，打开后写上你的域名，保存后记得要重命名，将.txt删除；依次输入<ul><li><code>hexo clean</code></li><li><code>hexo g</code></li><li><code>hexo d</code></li></ul></li><li>打开GitHub，看看CNAME文件是否已经在你的项目中</li><li>解析域名，<a href="https://zhuanlan.zhihu.com/p/86961133">参照此处</a>，等几个小时刷新</li></ul><hr><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/102592286">主要参考来源，谢谢这位博主</a></li><li>选择Hexo主题和选择Jekyll主题是有区别的，挑选的时候要注意辨别！</li><li>返回 blog 文件，打开 Git Bash，输入<ul><li><code>git clone https://github.com/ChrAlpha/hexo-theme-cards.git themes/cards</code></li><li>即 <code>git clone (URL) (相对路径)</code></li></ul></li><li>打开根目录下的_config.yml (站点配置文件)，修改主题（<strong>注意冒号后都要有空格</strong>）</li></ul><blockquote class="blockquote-note blockquote-note__important"><div class="blockquote-note__header"><div class="blockquote-note__icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></div>更新的常用指令</div><div class="blockquote-note__content"><ul><li><code>hexo g &amp;&amp; hexo s</code> 上传到缓冲区，在本地确认博客状态</li><li><code>hexo g &amp;&amp; hexo d</code> 直接上传</li></ul></div></blockquote><hr><h2 id="🥰-优化博客"><a href="#🥰-优化博客" class="headerlink" title="🥰 优化博客"></a>🥰 优化博客</h2><ul><li>大多数的问题可以<a href="https://theme-cards.ichr.me/">参考这里</a>这个页面解决。网络上搜到的很多教程都是基于next主题的，但是每个主题的操作可能非常不一样，</li></ul><h3 id="魔改主题"><a href="#魔改主题" class="headerlink" title="魔改主题"></a>魔改主题</h3><h4 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h4><ul><li>我直接使用了匿名评论箱进行评论管理</li></ul><h4 id="躲避搜索"><a href="#躲避搜索" class="headerlink" title="躲避搜索"></a>躲避搜索</h4><ul><li><a href="https://mikolaje.github.io/2019/hexo_seo.html">参考来源</a></li><li>在根目录的 source 文件夹中新建 <code>robots.txt</code></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁止任何搜索引擎搜索到任何内容</span></span><br><span class="line"><span class="attr">user-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h4><ul><li><a href="https://www.moonloss.com/post/hexo-localsearch/">参考来源：基本</a></li><li><a href="https://github.com/ChrAlpha/hexo-theme-cards/issues/91">参考来源：search无法正常加载</a></li></ul><h4 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h4><ul><li>TOC与正文间隔距离修改：<code>themes\cards\source\css\style\_functions\toc.styl</code><ul><li><code>line 78: padding-left 2rem</code></li></ul></li></ul><hr><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ul><li>在文件管理方面，我的主要需求是<ul><li><input checked="" disabled="" type="checkbox"> Obsidian 可以用作我的.md编辑器</li><li><input checked="" disabled="" type="checkbox"> Obsidian 的文件目录与博客文章管理目录基本相同</li></ul></li><li>从 <a href="https://hexo.io/zh-cn/docs/front-matter.html">这篇文章：Front-matter设置</a> 我们可以知道，文章主要是通过 <code>Front-matter</code> 进行管理。目前根据我的理解，只要在 Obsidian 文章开头设置好元数据，便可以很方便地将文章发表到个人博客上。</li><li>通过利用 Obsidian 中自带的模板插件，编辑时可以将一些常用的代码插入到文本当中（<del>以省去我搜来搜去的时间</del>）</li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里是关于我搭建个人博客的故事。&lt;/p&gt;</summary>
    
    
    
    <category term="🍩 AboutLib | 博客纪年" scheme="http://this-lib-cannot-afford-other-names.xyz/categories/%F0%9F%8D%A9-AboutLib-%E5%8D%9A%E5%AE%A2%E7%BA%AA%E5%B9%B4/"/>
    
    
    <category term="造物" scheme="http://this-lib-cannot-afford-other-names.xyz/tags/%E9%80%A0%E7%89%A9/"/>
    
  </entry>
  
</feed>
